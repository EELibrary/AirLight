--- ../src-base/minecraft/net/minecraft/pathfinding/PathHeap.java
+++ ../src-work/minecraft/net/minecraft/pathfinding/PathHeap.java
@@ -1,151 +1,128 @@
 package net.minecraft.pathfinding;
 
-public class PathHeap
-{
-    private PathPoint[] pathPoints = new PathPoint[128];
-    private int count;
+import java.util.concurrent.atomic.AtomicReferenceArray;
 
-    public PathPoint addPoint(PathPoint point)
-    {
-        if (point.index >= 0)
-        {
+public class PathHeap {
+    private AtomicReferenceArray<PathPoint> pathPoints = new AtomicReferenceArray<>(128);
+    private volatile int count;
+    public PathPoint addPoint(PathPoint point) {
+        if (point.index.get() >= 0) {
             throw new IllegalStateException("OW KNOWS!");
-        }
-        else
-        {
-            if (this.count == this.pathPoints.length)
-            {
+        } else {
+            if (this.count == this.pathPoints.length()) {
                 PathPoint[] apathpoint = new PathPoint[this.count << 1];
-                System.arraycopy(this.pathPoints, 0, apathpoint, 0, this.count);
-                this.pathPoints = apathpoint;
+                int length = this.pathPoints.length();
+                PathPoint[] ps = new PathPoint[length];
+                for (int i=0;i<length;i++){
+                    ps[i] = this.pathPoints.get(i);
+                }
+                System.arraycopy(ps, 0, apathpoint, 0, this.count);
+                for (int i = 0; i < apathpoint.length; i++) {
+                    pathPoints.set(i, apathpoint[i]);
+                }
             }
 
-            this.pathPoints[this.count] = point;
-            point.index = this.count;
-            this.sortBack(this.count++);
+
+            this.pathPoints.set(this.count, point);
+            point.index.set(this.count);
+            this.sortBack(++this.count);
             return point;
         }
     }
 
-    public void clearPath()
-    {
+    public void clearPath() {
         this.count = 0;
     }
 
-    public PathPoint dequeue()
-    {
-        PathPoint pathpoint = this.pathPoints[0];
-        this.pathPoints[0] = this.pathPoints[--this.count];
-        this.pathPoints[this.count] = null;
+    public PathPoint dequeue() {
+        PathPoint pathpoint = null;
+        pathpoint = this.pathPoints.get(0);
+        this.pathPoints.set(0,this.pathPoints.get(--this.count));
+        this.pathPoints.set(this.count,null);
 
-        if (this.count > 0)
-        {
+        if (this.count > 0) {
             this.sortForward(0);
         }
 
-        pathpoint.index = -1;
+        pathpoint.index.set(-1);
         return pathpoint;
     }
 
-    public void changeDistance(PathPoint point, float distance)
-    {
+    public void changeDistance(PathPoint point, float distance) {
         float f = point.distanceToTarget;
         point.distanceToTarget = distance;
 
-        if (distance < f)
-        {
-            this.sortBack(point.index);
+        if (distance < f) {
+            this.sortBack(point.index.get());
+        } else {
+            this.sortForward(point.index.get());
         }
-        else
-        {
-            this.sortForward(point.index);
-        }
     }
 
-    private void sortBack(int index)
-    {
-        PathPoint pathpoint = this.pathPoints[index];
+    private void sortBack(int index) {
+        PathPoint pathpoint = this.pathPoints.get(index);
         int i;
 
-        for (float f = pathpoint.distanceToTarget; index > 0; index = i)
-        {
+        for (float f = pathpoint.distanceToTarget; index > 0; index = i) {
             i = index - 1 >> 1;
-            PathPoint pathpoint1 = this.pathPoints[i];
+            PathPoint pathpoint1 = this.pathPoints.get(i);
 
-            if (f >= pathpoint1.distanceToTarget)
-            {
+            if (f >= pathpoint1.distanceToTarget) {
                 break;
             }
-
-            this.pathPoints[index] = pathpoint1;
-            pathpoint1.index = index;
+            this.pathPoints.set(index, pathpoint1);
+            pathpoint1.index.set(index);
         }
-
-        this.pathPoints[index] = pathpoint;
-        pathpoint.index = index;
+        this.pathPoints.set(index, pathpoint);
+        pathpoint.index.set(index);
     }
 
-    private void sortForward(int index)
-    {
-        PathPoint pathpoint = this.pathPoints[index];
+    private void sortForward(int index) {
+        PathPoint pathpoint =  this.pathPoints.get(index);
         float f = pathpoint.distanceToTarget;
 
-        while (true)
-        {
+        while (true) {
             int i = 1 + (index << 1);
             int j = i + 1;
 
-            if (i >= this.count)
-            {
+            if (i >= this.count) {
                 break;
             }
 
-            PathPoint pathpoint1 = this.pathPoints[i];
+            PathPoint pathpoint1 = this.pathPoints.get(i);
             float f1 = pathpoint1.distanceToTarget;
             PathPoint pathpoint2;
             float f2;
 
-            if (j >= this.count)
-            {
+            if (j >= this.count) {
                 pathpoint2 = null;
                 f2 = Float.POSITIVE_INFINITY;
-            }
-            else
-            {
-                pathpoint2 = this.pathPoints[j];
+            } else {
+                pathpoint2 = this.pathPoints.get(j);
                 f2 = pathpoint2.distanceToTarget;
             }
 
-            if (f1 < f2)
-            {
-                if (f1 >= f)
-                {
+            if (f1 < f2) {
+                if (f1 >= f) {
                     break;
                 }
-
-                this.pathPoints[index] = pathpoint1;
-                pathpoint1.index = index;
+                this.pathPoints.set(index, pathpoint1);
+                pathpoint1.index.set(index);
                 index = i;
-            }
-            else
-            {
-                if (f2 >= f)
-                {
+            } else {
+                if (f2 >= f) {
                     break;
                 }
-
-                this.pathPoints[index] = pathpoint2;
-                pathpoint2.index = index;
+                this.pathPoints.set(index, pathpoint2);
+                pathpoint2.index.set(index);
                 index = j;
             }
         }
-
-        this.pathPoints[index] = pathpoint;
-        pathpoint.index = index;
+        this.pathPoints.set(index, pathpoint);
+        pathpoint.index.set(index);
     }
 
-    public boolean isPathEmpty()
-    {
+    public boolean isPathEmpty() {
         return this.count == 0;
     }
 }
