--- ../src-base/minecraft/net/minecraft/pathfinding/Path.java
+++ ../src-work/minecraft/net/minecraft/pathfinding/Path.java
@@ -46,7 +46,9 @@
 
     public void setPoint(int index, PathPoint point)
     {
-        this.points[index] = point;
+        synchronized (points) {
+            this.points[index] = point;
+        }
     }
 
     public int getCurrentPathLength()
@@ -69,12 +71,17 @@
         this.currentPathIndex = currentPathIndexIn;
     }
 
-    public Vec3d getVectorFromIndex(Entity entityIn, int index)
-    {
-        double d0 = (double)this.points[index].x + (double)((int)(entityIn.width + 1.0F)) * 0.5D;
-        double d1 = (double)this.points[index].y;
-        double d2 = (double)this.points[index].z + (double)((int)(entityIn.width + 1.0F)) * 0.5D;
-        return new Vec3d(d0, d1, d2);
+    public Vec3d getVectorFromIndex(Entity entityIn, int index) {
+        synchronized (points) {
+            if (index > points.length) {
+                return new Vec3d(entityIn.posX, entityIn.posY, entityIn.posZ);
+            }
+            double d0 = (double) this.points[index].x + (double) ((int) (entityIn.width + 1.0F)) * 0.5D;
+            double d1 = (double) this.points[index].y;
+            double d2 = (double) this.points[index].z + (double) ((int) (entityIn.width + 1.0F)) * 0.5D;
+            return new Vec3d(d0, d1, d2);
+        }
+
     }
 
     public Vec3d getPosition(Entity entityIn)
@@ -82,33 +89,29 @@
         return this.getVectorFromIndex(entityIn, this.currentPathIndex);
     }
 
-    public Vec3d getCurrentPos()
-    {
-        PathPoint pathpoint = this.points[this.currentPathIndex];
-        return new Vec3d((double)pathpoint.x, (double)pathpoint.y, (double)pathpoint.z);
+    public Vec3d getCurrentPos() {
+        PathPoint pathpoint;
+        synchronized (points) {
+            pathpoint = this.points[this.currentPathIndex];
+        }
+        return new Vec3d((double) pathpoint.x, (double) pathpoint.y, (double) pathpoint.z);
     }
 
-    public boolean isSamePath(Path pathentityIn)
-    {
-        if (pathentityIn == null)
-        {
-            return false;
-        }
-        else if (pathentityIn.points.length != this.points.length)
-        {
-            return false;
-        }
-        else
-        {
-            for (int i = 0; i < this.points.length; ++i)
-            {
-                if (this.points[i].x != pathentityIn.points[i].x || this.points[i].y != pathentityIn.points[i].y || this.points[i].z != pathentityIn.points[i].z)
-                {
-                    return false;
+    public boolean isSamePath(Path pathentityIn) {
+        synchronized (points) {
+            if (pathentityIn == null) {
+                return false;
+            } else if (pathentityIn.points.length != this.points.length) {
+                return false;
+            } else {
+                for (int i = 0; i < this.points.length; ++i) {
+                    if (this.points[i].x != pathentityIn.points[i].x || this.points[i].y != pathentityIn.points[i].y || this.points[i].z != pathentityIn.points[i].z) {
+                        return false;
+                    }
                 }
-            }
 
-            return true;
+                return true;
+            }
         }
     }
 
@@ -157,10 +160,12 @@
         }
 
         Path path = new Path(apathpoint);
-        path.openSet = apathpoint1;
-        path.closedSet = apathpoint2;
-        path.target = pathpoint;
-        path.currentPathIndex = i;
+        synchronized (path.points) {
+            path.openSet = apathpoint1;
+            path.closedSet = apathpoint2;
+            path.target = pathpoint;
+            path.currentPathIndex = i;
+        }
         return path;
     }
 }
