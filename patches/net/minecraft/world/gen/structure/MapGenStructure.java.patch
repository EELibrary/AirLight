--- ../src-base/minecraft/net/minecraft/world/gen/structure/MapGenStructure.java
+++ ../src-work/minecraft/net/minecraft/world/gen/structure/MapGenStructure.java
@@ -25,80 +25,85 @@
 
     public abstract String getStructureName();
 
-    protected final synchronized void recursiveGenerate(World worldIn, final int chunkX, final int chunkZ, int originalX, int originalZ, ChunkPrimer chunkPrimerIn)
+    private final Object mutex = new Object();
+    protected final void recursiveGenerate(World worldIn, final int chunkX, final int chunkZ, int originalX, int originalZ, ChunkPrimer chunkPrimerIn)
     {
-        this.initializeStructureData(worldIn);
+        synchronized (this.mutex){
+            this.initializeStructureData(worldIn);
 
-        if (!this.structureMap.containsKey(ChunkPos.asLong(chunkX, chunkZ)))
-        {
-            this.rand.nextInt();
-
-            try
+            if (!this.structureMap.containsKey(ChunkPos.asLong(chunkX, chunkZ)))
             {
-                if (this.canSpawnStructureAtCoords(chunkX, chunkZ))
-                {
-                    StructureStart structurestart = this.getStructureStart(chunkX, chunkZ);
-                    this.structureMap.put(ChunkPos.asLong(chunkX, chunkZ), structurestart);
+                this.rand.nextInt();
 
-                    if (structurestart.isSizeableStructure())
+                try
+                {
+                    if (this.canSpawnStructureAtCoords(chunkX, chunkZ))
                     {
-                        this.setStructureStart(chunkX, chunkZ, structurestart);
+                        StructureStart structurestart = this.getStructureStart(chunkX, chunkZ);
+                        this.structureMap.put(ChunkPos.asLong(chunkX, chunkZ), structurestart);
+
+                        if (structurestart.isSizeableStructure())
+                        {
+                            this.setStructureStart(chunkX, chunkZ, structurestart);
+                        }
                     }
                 }
-            }
-            catch (Throwable throwable)
-            {
-                CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception preparing structure feature");
-                CrashReportCategory crashreportcategory = crashreport.makeCategory("Feature being prepared");
-                crashreportcategory.addDetail("Is feature chunk", new ICrashReportDetail<String>()
+                catch (Throwable throwable)
                 {
-                    public String call() throws Exception
+                    CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception preparing structure feature");
+                    CrashReportCategory crashreportcategory = crashreport.makeCategory("Feature being prepared");
+                    crashreportcategory.addDetail("Is feature chunk", new ICrashReportDetail<String>()
                     {
-                        return MapGenStructure.this.canSpawnStructureAtCoords(chunkX, chunkZ) ? "True" : "False";
-                    }
-                });
-                crashreportcategory.addCrashSection("Chunk location", String.format("%d,%d", chunkX, chunkZ));
-                crashreportcategory.addDetail("Chunk pos hash", new ICrashReportDetail<String>()
-                {
-                    public String call() throws Exception
+                        public String call() throws Exception
+                        {
+                            return MapGenStructure.this.canSpawnStructureAtCoords(chunkX, chunkZ) ? "True" : "False";
+                        }
+                    });
+                    crashreportcategory.addCrashSection("Chunk location", String.format("%d,%d", chunkX, chunkZ));
+                    crashreportcategory.addDetail("Chunk pos hash", new ICrashReportDetail<String>()
                     {
-                        return String.valueOf(ChunkPos.asLong(chunkX, chunkZ));
-                    }
-                });
-                crashreportcategory.addDetail("Structure type", new ICrashReportDetail<String>()
-                {
-                    public String call() throws Exception
+                        public String call() throws Exception
+                        {
+                            return String.valueOf(ChunkPos.asLong(chunkX, chunkZ));
+                        }
+                    });
+                    crashreportcategory.addDetail("Structure type", new ICrashReportDetail<String>()
                     {
-                        return MapGenStructure.this.getClass().getCanonicalName();
-                    }
-                });
-                throw new ReportedException(crashreport);
+                        public String call() throws Exception
+                        {
+                            return MapGenStructure.this.getClass().getCanonicalName();
+                        }
+                    });
+                    throw new ReportedException(crashreport);
+                }
             }
         }
     }
 
-    public synchronized boolean generateStructure(World worldIn, Random randomIn, ChunkPos chunkCoord)
+    public boolean generateStructure(World worldIn, Random randomIn, ChunkPos chunkCoord)
     {
-        this.initializeStructureData(worldIn);
-        int i = (chunkCoord.x << 4) + 8;
-        int j = (chunkCoord.z << 4) + 8;
-        boolean flag = false;
-        ObjectIterator objectiterator = this.structureMap.values().iterator();
+       synchronized (this.mutex){
+           this.initializeStructureData(worldIn);
+           int i = (chunkCoord.x << 4) + 8;
+           int j = (chunkCoord.z << 4) + 8;
+           boolean flag = false;
+           ObjectIterator objectiterator = this.structureMap.values().iterator();
 
-        while (objectiterator.hasNext())
-        {
-            StructureStart structurestart = (StructureStart)objectiterator.next();
+           while (objectiterator.hasNext())
+           {
+               StructureStart structurestart = (StructureStart)objectiterator.next();
 
-            if (structurestart.isSizeableStructure() && structurestart.isValidForPostProcess(chunkCoord) && structurestart.getBoundingBox().intersectsWith(i, j, i + 15, j + 15))
-            {
-                structurestart.generateStructure(worldIn, randomIn, new StructureBoundingBox(i, j, i + 15, j + 15));
-                structurestart.notifyPostProcessAt(chunkCoord);
-                flag = true;
-                this.setStructureStart(structurestart.getChunkPosX(), structurestart.getChunkPosZ(), structurestart);
-            }
-        }
+               if (structurestart.isSizeableStructure() && structurestart.isValidForPostProcess(chunkCoord) && structurestart.getBoundingBox().intersectsWith(i, j, i + 15, j + 15))
+               {
+                   structurestart.generateStructure(worldIn, randomIn, new StructureBoundingBox(i, j, i + 15, j + 15));
+                   structurestart.notifyPostProcessAt(chunkCoord);
+                   flag = true;
+                   this.setStructureStart(structurestart.getChunkPosX(), structurestart.getChunkPosZ(), structurestart);
+               }
+           }
 
-        return flag;
+           return flag;
+       }
     }
 
     public boolean isInsideStructure(BlockPos pos)
@@ -117,55 +122,59 @@
     @Nullable
     protected StructureStart getStructureAt(BlockPos pos)
     {
-        ObjectIterator objectiterator = this.structureMap.values().iterator();
-        label31:
+       synchronized (this.mutex){
+           ObjectIterator objectiterator = this.structureMap.values().iterator();
+           label31:
 
-        while (objectiterator.hasNext())
-        {
-            StructureStart structurestart = (StructureStart)objectiterator.next();
+           while (objectiterator.hasNext())
+           {
+               StructureStart structurestart = (StructureStart)objectiterator.next();
 
-            if (structurestart.isSizeableStructure() && structurestart.getBoundingBox().isVecInside(pos))
-            {
-                Iterator<StructureComponent> iterator = structurestart.getComponents().iterator();
+               if (structurestart.isSizeableStructure() && structurestart.getBoundingBox().isVecInside(pos))
+               {
+                   Iterator<StructureComponent> iterator = structurestart.getComponents().iterator();
 
-                while (true)
-                {
-                    if (!iterator.hasNext())
-                    {
-                        continue label31;
-                    }
+                   while (true)
+                   {
+                       if (!iterator.hasNext())
+                       {
+                           continue label31;
+                       }
 
-                    StructureComponent structurecomponent = iterator.next();
+                       StructureComponent structurecomponent = iterator.next();
 
-                    if (structurecomponent.getBoundingBox().isVecInside(pos))
-                    {
-                        break;
-                    }
-                }
+                       if (structurecomponent.getBoundingBox().isVecInside(pos))
+                       {
+                           break;
+                       }
+                   }
 
-                return structurestart;
-            }
-        }
+                   return structurestart;
+               }
+           }
 
-        return null;
+           return null;
+       }
     }
 
     public boolean isPositionInStructure(World worldIn, BlockPos pos)
     {
-        this.initializeStructureData(worldIn);
-        ObjectIterator objectiterator = this.structureMap.values().iterator();
+        synchronized (this.mutex){
+            this.initializeStructureData(worldIn);
+            ObjectIterator objectiterator = this.structureMap.values().iterator();
 
-        while (objectiterator.hasNext())
-        {
-            StructureStart structurestart = (StructureStart)objectiterator.next();
-
-            if (structurestart.isSizeableStructure() && structurestart.getBoundingBox().isVecInside(pos))
+            while (objectiterator.hasNext())
             {
-                return true;
+                StructureStart structurestart = (StructureStart)objectiterator.next();
+
+                if (structurestart.isSizeableStructure() && structurestart.getBoundingBox().isVecInside(pos))
+                {
+                    return true;
+                }
             }
-        }
 
-        return false;
+            return false;
+        }
     }
 
     @Nullable
@@ -173,36 +182,43 @@
 
     protected void initializeStructureData(World worldIn)
     {
-        if (this.structureData == null && worldIn != null)
-        {
-            this.structureData = (MapGenStructureData)worldIn.loadData(MapGenStructureData.class, this.getStructureName());
-
-            if (this.structureData == null)
+        synchronized (this.mutex){
+            if (this.structureData == null && worldIn != null)
             {
-                this.structureData = new MapGenStructureData(this.getStructureName());
-                worldIn.setData(this.getStructureName(), this.structureData);
-            }
-            else
-            {
-                NBTTagCompound nbttagcompound = this.structureData.getTagCompound();
-
-                for (String s : nbttagcompound.getKeySet())
+                // Spigot Start
+                if (worldIn.spigotConfig.saveStructureInfo) {
+                    this.structureData = (MapGenStructureData)worldIn.getPerWorldStorage().getOrLoadData(MapGenStructureData.class, this.getStructureName());
+                } else {
+                    this.structureData = new MapGenStructureData(this.getStructureName());
+                }
+                // Spigot End
+                if (this.structureData == null)
                 {
-                    NBTBase nbtbase = nbttagcompound.getTag(s);
+                    this.structureData = new MapGenStructureData(this.getStructureName());
+                    worldIn.getPerWorldStorage().setData(this.getStructureName(), this.structureData);
+                }
+                else
+                {
+                    NBTTagCompound nbttagcompound = this.structureData.getTagCompound();
 
-                    if (nbtbase.getId() == 10)
+                    for (String s : nbttagcompound.getKeySet())
                     {
-                        NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbtbase;
+                        NBTBase nbtbase = nbttagcompound.getTag(s);
 
-                        if (nbttagcompound1.hasKey("ChunkX") && nbttagcompound1.hasKey("ChunkZ"))
+                        if (nbtbase.getId() == 10)
                         {
-                            int i = nbttagcompound1.getInteger("ChunkX");
-                            int j = nbttagcompound1.getInteger("ChunkZ");
-                            StructureStart structurestart = MapGenStructureIO.getStructureStart(nbttagcompound1, worldIn);
+                            NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbtbase;
 
-                            if (structurestart != null)
+                            if (nbttagcompound1.hasKey("ChunkX") && nbttagcompound1.hasKey("ChunkZ"))
                             {
-                                this.structureMap.put(ChunkPos.asLong(i, j), structurestart);
+                                int i = nbttagcompound1.getInteger("ChunkX");
+                                int j = nbttagcompound1.getInteger("ChunkZ");
+                                StructureStart structurestart = MapGenStructureIO.getStructureStart(nbttagcompound1, worldIn);
+
+                                if (structurestart != null)
+                                {
+                                    this.structureMap.put(ChunkPos.asLong(i, j), structurestart);
+                                }
                             }
                         }
                     }
